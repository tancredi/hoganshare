// Generated by CoffeeScript 1.3.3
(function() {
  var Hogan, HoganShare, fs;

  fs = require('fs');

  Hogan = require('hogan.js');

  HoganShare = (function() {

    function HoganShare(dir, ext) {
      if (ext == null) {
        ext = "html";
      }
      this.templates = [];
      this.clientWrap = Hogan.compile(fs.readFileSync(__dirname + "/../views/templates.js.mustache", "utf8"));
      this.dir = dir;
      this.ext = ext;
    }

    HoganShare.prototype.getTemplates = function() {
      this.fetchTemplates(this.dir);
      return this.map();
    };

    HoganShare.prototype.map = function() {
      if (this.templates.length !== 0) {
        this.templates[this.templates.length - 1].last = true;
      }
      return this.clientWrap.render({
        templates: this.templates
      });
    };

    HoganShare.prototype.fetchTemplates = function(dir) {
      var file, _i, _len, _ref, _results;
      _ref = this.getDirFiles(dir);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        _results.push(this.fetchTemplate(file, dir));
      }
      return _results;
    };

    HoganShare.prototype.fetchTemplate = function(file, dir) {
      var id, path, template;
      if (this.matchesExtension(file)) {
        path = dir + '/' + file;
        id = path.replace(this.dir, '').substr(1).replace("." + this.ext, '');
        template = fs.readFileSync(path, "utf8");
        template = Hogan.compile(template, {
          asString: true
        });
        return this.templates.push({
          file: path,
          id: id,
          template: template
        });
      } else {
        return this.fetchTemplates("" + dir + "/" + file);
      }
    };

    HoganShare.prototype.matchesExtension = function(file) {
      return file.substr(file.length - 5) === ("." + this.ext);
    };

    HoganShare.prototype.getDirFiles = function(dir) {
      return fs.readdirSync(dir);
    };

    return HoganShare;

  })();

  module.exports = HoganShare;

}).call(this);
